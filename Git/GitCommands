Configure Git:
--------------
// global config
$ git config --global user.name <your-name>
$ git config --global user.email <your-email>

// local config (in a repo/project)
$ git config --local user.name <your-name>
$ git config --local user.email <your-email>

$ git config --list                                             // see full configuration of git
$ git remote set-url origin <remote-url>                        // set remote url
$ git config --global core.editor emacs                         // use emacs for interactive commands
$ git config --global merge.tool opendiff                       // use opendiff for merging conflicts
$ git config --global color.ui true                             // better visualization
$ git config core.ignorecase false                              // if we want case sensitive git

<---- Auto correct Line Feed ---->
$ git config --global core.autocrlf input                       // On unix line systems (Linux, OSX, etc)
$ git config --global core.autocrlf true                        // On windows system
$ git config --global core.autocrlf false                       // for Windows only project


// set alias
$ git config --global alias.st status                           //git st -> git status
$ git config --global alias.co checkout                         //git co -> git checkout
$ git config --global alias.br branch                           // git br -> git branch




Branching:
----------
- master -> default devel branch
- origin -> default upstream branch
- HEAD -> current branch
- HEAD^ -> parent of HEAD
- HEAD-4 -> great-great grandparent of HEAD
- foo..bar -> from branch foo to branch bar

$ git branch                                         // Show all local branches
$ git branch -r                                      //see all the remote branch
$ git branch -av                                     // list all local and remote branches
$ git branch <branch-name>                           // Create a new branch
$ git push origin :<branchname>                      //delete the remote branch
$ git branch -d <branchname>                         //delete the loacal branch, show a warning
$ git branch -D <branhcname>                         //force to delete branch
$ git remote prune origin                            //cleanup remote deleted branch

$ git push origin <branchame>
$ git checkout -b <newBranchName>
$ git push -u origin <branchname>


Merging:
--------
$ git mergetool
$ git merge --squash <privateFeatureBranch>
$ git cherry-pick <sh1>

Workflow:
---------
$ git add .
$ git add --all
$ git commit -am 'commit message'                     // add & commit
$ git stash = git stash save                          // save the changes in temp box
$ git stash save "provide a stash message"            // we can provide a stash message when stashing.
$ git stash apply = git stash apply stash@{0}         // return the codes I cleaned before
$ git stash apply stash@{2}                           // get back the #3 stash codes.
$ git stash list                                      // see how many stash we have
$ git stash list --stash                              // show all stash lists with changes file
$ git stash show stash@{1}                            // show only a specific stash with commits
$ git stash show --patch                              // shows file diffs
$ git stash drop = git stash drop stash@{0}           // pop = apply + drop
$ git stash pop = git stash apply + git stash drop    // temporary delete or clean
$ git stash clear                                     // clean all the stash
$ git stash branch <branchname> stash@{0}             // checkout a new branch with popping stash@{0}
$ git stash save --keep-index

Log:
----
$ git log --oneline --decorate --all --graph           // see all commits with better visualization
$ git log -p <file/directory>                          // Show change history for file/directory including diffs
$ git log --pretty=oneline
$ git log --oneline -p
$ git log --oneline --stat
$ git log --oneline --graph
$ git log --until=1.minute.ago                        //until
$ git log --since=1.day.ago                           //since (days)
$ git log --since=1.hour.ago                          //since(hours)
$ git log --since1.month.ago --until=2.weeks.ago      // since & until (relative)
$ git log --since=2000-01-01 --until=2012-12-21       // since & until (absolute)
$ git blame index.html --date short
$ git rm --cached development.log                     //what it you're already tracking log files?

Recovery/Reset:
---------------
$ git log                                             // Show  all the change/commit history
$ git show <commit hash>                              // to see what I have in a specific commit
$ git reset --soft <commit hash>                      // back to a specifiq commit and exits the change
$ git diff HEAD                                       // Show the changes to files not yet staged

$ git clean -f -n                                     // clean untract file (dry run)
$ git clean -dxf
$ git rm --cached -r .
$ git checkout master

Reflog:
-------
$ git reflog                                          // see all the task step by step
$ git reset <HEAD no.> e.g. HEAD@{8}                  // return to present after a hard reset, then give the next command
$ git reset --hard                                    // we moved to HAED@{8} completely
$ git log --walk-reflogs                              // more details
$ git branch <branceName> HEAD@{1}                    // create a new branch with a commit (the branch is deleted where this commit was given)

Amend:
------
$ git add task2.txt                                   // add any file
$ git commit --amend -m 'new message'                 // merge current change to previous commit and will also change the commit hash

Push & Pull:
$ git push -r origin <branch-name> // by force overwrite the remote branch

$ git remote add origin git@github.com....
$ git remote show                                     // can have multiple remote
$ git remote show origin                              // show url of remote

Go forward/backward:
--------------------
$ git checkout <commit hash>                          // go to a specific commit hash
$ git checkout <branchName>                           // return to present state
$ git checkout <commit hash> <fileName>               // only file will go back to specific commit
$ git checkout <branchName> -f                        // return to persent state

Go forward/backward:
$ git checkout <commit hash> // go to a specific commit hash
$ git checkout <branchName>  // return to present state
$ git checkout <commit hash> <fileName>  // only file will go back to specific commit
$ git checkout <branchName> -f  // return to persent state

Squash:
$ git rebase -i HEAD~3                                 // merge last 3 commit in one, see https://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/
// in general I do
$ git reset --soft HEAD~3                              // undo last 3 commits, remains all the changes in local
$ git add --all; git commit -m 'new squash message'    // commit the 3 previous commits in one
$ git push -f origin <branch-name>                     // by force overwrite the remote branch and also commits

Conflicts:
----------
- Life being the pain in the proverbial that it is, our merge might have a conflict that we have to solve!
  The git status command will help you understand where the conflict exists. If you open the file,
  youâ€™ll notice some markers: <<<<<<<, >>>>>>>, and =======, that surround the lines that conflict,
  including the changes that each branch is trying achieve.

- fix manually

Prune Empty Commits:
--------------------
- git <brance-name> -f --prune-empty -- --all                                             // delete all empty commits in a branch
- git <branch-name> --tree-filter 'rm -f password.txt'                                    // remove password.txt file
- git filter-branch --index-filter 'git rm --cached --ignore-unmatch master_password.txt' // faster for large code base, workded on stagin area, --ignore-nmatch:
                                                                                             commands run successfully even if the file is not present.
Cherry-pick:
------------
- git cherry-pick <commit-hash>                               // copy a single commit to current branch
- git cherry-pick --edit <commit-hash>                        // pop-up a editor, then change the commit message.
- git cherry-pick --no-commit <commit-hash> <commit-hash>     // --no-commit pulls in changes and stages them, but doesn't commit
- git cherry-pick -x <commit-hash>                            // -x: keep track where the commit came from
- git cherry-pick --signoff <commit-hash>                     // --signoff add current users name to commit message
 
SubModules: (always push to two repo, first to submodules then parent repo)
---------------------------------------------------------------------------
- git submodule add git@example.com:css.git                      // add a submodule in a git project, also create a .gitmodules file
- git submodule init // initialize submodules.
- git submodule update // update the submodules
- git branch temp_changes a7eded4                                // after 'git submodule update' command, codes get checked out in a HEADLESS state.
- git push --recurse-submodules=check                            // will abort a push it we haven't pushed a submodule. (run in parent dir )
- git push --recurse-submodules=on-demand                        // push to parent repo, then it'll push to submodule automatically.
- git config alias.pushall "push --recurse-submodules=on-demand" // alias   


======================== mastering on github =======================================


********************* Tags and Releases *****************************

- realese tag point to a single commit
- semantic versioning should be followed for tags (major.minor.patch)
- Three key reasons for creating a relese branch:
	- Manual QA
	- Long running releases
	- On demand hot fixed

$ git checkout <commit-hash>                  // checkout to a commit to give a tag
$ git tag -a v1.0.0 -m "message"              // give a tag to this commit
$ git push --tags                             // push the tags to origin

<----- release branches ------->
$ git checkout v1.1                           // checkout to a tag
$ git checkout -b <hot-branch>                // checkout a new branch from present commit
<hotfix>
$ git commit -m "Hotfix"
$ git tag v1.1.1 -m "hotfix"
$ git checkout master
$ git merge <hot-branch> -m "Merge hotfix"
$ git branch -d <hot-branch>                  // delete the release branch

<----- release in github ------->


<------ github pages ----------->
- for a username github page url will be '<username>.github.io'               // sajibcse68.github.io
- for a project github page url will be '<username.githun.io/<projectname>'   // sajibcse68.github.io/dojo_rules


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Other:
------
$ git status                                   // List new or modified files not yet committed
$ git fetch                                    // Get the latest changes from origin (no merge)
$ git pull                                     // Fetch the latest changes from origin and merge
$ git pull --rebase                            // Fetch the latest changes from origin and rebase
$ git pull origin <bn> -s recursive -X theirs  // while pulling if conflicts accepts theirs
$ git pull origin <bn> -s recursive -X ours    // while pulling if conflicts accepts ours (HEAD)
$ git merge -s ours <old-master>               // merge old master, keeping "our" (origin/master's) content
$ git init                                     // from scratch -- create a new local repository
$ git diff --cached                            // Show all staged and unstaged file changes
$ git gui
$ git difftool
$ git gc
$ git command --help                           // When in doubt, use git help

$ git diff b1..b2                                      //compare two brances, show you what is in b2 that is not in b1
$ git diff <commit1> <commit2>                         // Show changes between two commits id
$ git push -f origin HEAD^:master                      // "undo" the push from remote and keep the local intact
$ git blame <file>                                     // List the change dates and authors for a file
$ git show <commit>:<file>                             // Show the file changes for a commit id and/or file

*********************************
$ git push origin +1234^:master
/* want to remove the top commit. We want to force the master branch of the origin remote repository to the parent of 1234.

Here git interprets x^ as the parent of x and + as a forced non-fastforward push.
*/
*********************************
$ git reset HEAD^ --hard
$ git push origin -f
/*
If master branch
*/

<------ Recover a branch after deletion --------------->
$ git reflog                                          // see all commits and select the last commit (SHA1) of deleted branch
$ git checkout <sha>                                  // checkout that commit
$ git checkout -b <deleted-branch-name>               // recover that branch after creating a new branch with same name
// shortcut
$ git checkout -b <branch> <sha>

Ref: http://stackoverflow.com/questions/3640764/can-i-recover-branch-after-its-deletion-in-git

<------- Git in CodeSchool ----->
$ git reset --soft HEAD^                             //move to commit before `HEAD`
$ git commit --amend -m 'new commit message'         //add to the last commit
$ git reset --hard HEAD^^                            //undo last commit and all changes
$ git remote add <name> <address/url>                // to add new remote
$ git remote rm <name>                               // to remove a remote
$ git push -u remote <name> <mybranch>
$ git checkout -- <filename1> <filename2>            //discard all changes of file1 and file2

// Level 3
$ git remote -v                                      //see all the remotes


$ git tag                                            //show list of tag
$ git tag <new-tag>                                  // tag the current commit
$ git checkout <tagname>                             //checkout to a tag
$ git tag -a v0.0.3 -m "version 0.0.3"
$ git push --tag                                     // send tag to remote

// Lavel 6
$ git checkout admin_branch
$ git rebase master // merge all commits of admin_branch after master's commits
$ git checkout master
$ git checkout -b <history_master>  // backup master branch if necessary
$ git merge admin_branch

$ git rebase --continue
$ git rebase --skip
$ git rebase --abort

// Level 7 

$ git log --pretty=format:"%h $ad- %s [%an]" 
  /* %ad=author date, %an=author name
     %h=SHA hash, %s=subject, %d=ref names 
   */ 


<------ Git Real 2 -------->
$ git rebase -i HEAD~3 // i-> interactive rebase, will popup the window and we can rearrange the window.
$ write 'reword' replacing 'pick' // change the commit message
$ write 'edit' for stopping a commit that is already committed, then 'git reset HEAD^' (--soft), then do two commits.
// HEAD^ means the first parent of the tip of the current branch, HEAD^2 = second parent of current branch, HEAD~1 / HEAD~2 means always first parent (http://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git)
$ git rebase --continue // finish the rebase

git commit --allow-empty -m k3; git push origin outbound

.

<------ Difference between HEAD~ and HEAD^ ----------->
- ~2 means up two levels in the hierarchy, via the first parent if a commit has more than one parent                                                                                             -
- ^2 means the second parent where a commit has more than one parent (i.e. because it's a merge)
- These can be combined, so HEAD~2^3 means HEAD's grandparent commit's third parent commit.

G   H   I   J               A =      = A^0
 \ /     \ /                B = A^   = A^1     = A~1
  D   E   F                 C = A^2  = A^2
   \  |  / \                D = A^^  = A^1^1   = A~2
    \ | /   |               E = B^2  = A^^2
     \|/    |               F = B^3  = A^^3
      B     C               G = A^^^ = A^1^1^1 = A~3
       \   /                H = D^2  = B^^2    = A^^^2  = A~2^2
        \ /                 I = F^   = B^3^    = A^^3^
         A                  J = F^2  = B^3^2   = A^^3^2

//
HEAD~2   : 2 commits older than HEAD
HEAD^2   : the second parent of HEAD, if HEAD was a merge, otherwise illegal
HEAD@{2} : refers to the 3rd listing in the overview of git reflog
HEAD~~   : 2 commits older than HEAD
HEAD^^   : 2 commits older than HEAD

$ git branch --set-upstream master_upstream origin/master_upstream
The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to
Branch master_upstream set up to track remote branch master_upstream from origin.

